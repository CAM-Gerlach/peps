PEP: 639
Title: Improving License Clarity with Better Package Metadata
Version: $Revision$
Last-Modified: $Date$
Author: Philippe Ombredanne <pombredanne at nexb.com>,
        C.A.M. Gerlach <CAM.Gerlach at Gerlach.CAM>
Sponsor: Paul Moore <p.f.moore at gmail.com>
PEP-Delegate: Paul Moore <p.f.moore at gmail.com>
Discussions-To: https://discuss.python.org/t/2154
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 15-Aug-2019
Post-History:
Resolution:


Abstract
========

This PEP defines a specification for how licenses are documented in the
core metadata via a new ``License-Expression`` field, with license expression
strings using SPDX identifiers [#spdxlist]_.

This will make license declarations simpler and less ambiguous for:

- package authors to create,
- package users to read and understand, and,
- tools to process package license information mechanically.

The PEP also proposes to:

- Deprecate the legacy ``License`` field and ``license ::`` classifiers.

- Formally specify a new ``License-File`` field, which is already used by
  ``wheel`` and ``setuptools`` to include license files in distributions.

- Define how tools can validate license expressions and handle errors and
  deprecated fields/classifiers to balance adoption of this PEP with
  backwards-compatibility and a smooth transition for package authors.

The changes in this PEP will update the core metadata format to version 2.3.


Goals
=====

This PEP's scope is limited strictly to how we document the license of a
distribution, specifically covering:

- An improved and structured way to document a license expression.
- A formal mechanism to include license texts in a built package.

The changes to the core metadata specification that this PEP requires have been
designed to minimize impact and maximize backward compatibility.
This specification builds off of existing ways to document licenses that are
in use in some tools (e.g. by adding the ``License-File`` field already used in
``wheel`` and ``setuptools``) and by some package authors (e.g. storing an SPDX
license expression in the existing ``License`` field).

In addition to these proposed changes, this PEP contains:

- Recommendations for publishing tools on how to validate the new
  ``License-Expression`` field and report informational warnings when a package
  uses legacy metadata (the ``License`` field and ``License ::`` classifers).

- Informational appendices that contain surveys of how we document licenses
  today in Python packages and elsewhere, and a reference Python library to
  parse, validate and build correct license expressions.

It is the intent of the PEP authors to work closely with tool authors to
implement the recommendations for validation and warnings specified in this PEP.


Non-Goals
=========

This PEP is neutral regarding the choice of license by any package author.

In particular, the SPDX license expression syntax proposed in this PEP provides
simpler and more expressive conventions to document accurately any kind of
license that applies to a Python package, whether it is an open source license,
a free or libre software license, a proprietary license, or a combination of
such licenses.

This PEP makes no recommendation for specific licenses and does not require the
use of specific license documentation conventions. This PEP also does not impose
any restrictions when uploading to PyPI.

Instead, it is intended to document best practices already in use, extend them
to use a new formally-specified and supported mechanism, and provide guidance
for packaging tools on how to hand the transition and inform users accordingly.

This PEP is not about license documentation in files inside packages,
though this is a surveyed topic in the appendix.


Possible Future PEPs
--------------------

It is the intention of the authors of this PEP to consider the submission of
related but separate PEPs in the future, which may include:

- Removing the deprecated ``License`` field and ``License ::``
  classifiers from the Core Metadata specification

- Making the ``License-Expression`` and ``License-File`` fields mandatory
  for publishing tools and PyPI packages.

- Requiring uploads to PyPI to use only FOSS (Free and Open Source Software)
  licenses.


Motivation
==========

Software is licensed, and providing accurate licensing information to Python
packages users is an important matter. Today, there are multiple places where
licenses are documented in package metadata and there are limitations to what
can be documented. This is often leading to confusion or a lack of clarity both
for package authors and package users.

Several package authors have expressed difficulty and/or frustrations due to the
limited capabilities to express licensing in package metadata. This also applies
to Linux and BSD* distribution packagers. This has triggered several
license-related discussions and issues, in particular:

- https://github.com/pypa/trove-classifiers/issues/17
- https://github.com/pypa/interoperability-peps/issues/46
- https://github.com/pypa/packaging-problems/issues/41
- https://github.com/pypa/wheel/issues/138
- https://github.com/pombredanne/spdx-pypi-pep/issues/1

On average, Python packages tend to have more ambiguous, or missing, license
information than other common application package formats (such as npm, Maven or
Gem) as can be seen in the statistics [#cdstats]_ page of the ClearlyDefined
[#cd]_ project that cover all packages from PyPI, Maven, npm and Rubygems.
ClearlyDefined is an open source project to help improve clarity of other open
source projects that is incubating at the OSI (Open Source Initiative) [#osi]_.


Rationale
=========

A mini-survey of existing license metadata definitions in use in the Python
ecosystem today and documented in several other system/distro and application
package formats is provided in Appendix 2 of this PEP.

There are a few takeaways from the survey:

- Most package formats use a single ``License`` field.

- Many modern package formats use some form of license expression syntax to
  optionally combine more than one license identifier together.
  SPDX and SPDX-like syntaxes are the most popular in use.

- SPDX license identifiers are becoming a de-facto way to reference common
  licenses everywhere, whether or not a license expression syntax is used.

- Several package formats support documenting both a license expression and the
  paths of the corresponding files that contain the license text. Most free and
  open source software licenses require package authors to include their full
  text in a distribution.

These considerations have guided the design and recommendations of this PEP.

The use of a new ``License-Expression`` field will provide an intuitive,
structured and unambiguous way to express the license of a distribution
using a well-defined syntax and well-known license identifiers.
Similarly, a formally-specified ``License-Files`` field offers a standardized
way to declare the full text of the license(s) as legally required to be
included with the package when distributed, and allows other tools consuming
the core metadata to unambiguously locate a distribution's license files.

Over time, encouraging the use of these fields and deprecating and ambiguous,
duplicative legacy alternatives will help Python software publishers improve
the clarity, accuracy and portability of their licensing practices,
to the benefit of package authors, consumers and redistributors alike.


Specification
=============

The changes necessary to implement the improved license handling outlined in
this PEP include those in both author-provided static source metadata, as
specified in PEP 621, and built package metadata, as defined in the Core
Metadata specification [#cms]_. Furthermore, requirements are needed for
tools handling and converting legacy license metadata to license expressions,
to ensure the results are consistent, correct and unambiguous.


Core Metadata
-------------

The canonical source for the names and semantics of each of the supported
metadata fields is the Core Metadata Specification [#cms]_ document.

This PEP adds the ``License-Expression`` and ``License-File`` fields,
deprecates the ``License`` field, and deprecates the ``License ::``
classifiers in the ``Classifier`` field.

As it adds new fields, this PEP updates the core metadata to version 2.3.


Add License-Expression Field
''''''''''''''''''''''''''''

The ``License-Expression`` optional field is specified to contain a text string
that is a valid SPDX license expression, defined below.

Publishing tools SHOULD issue an informational warning if this field is
missing, and MAY raise an error. Build tools MAY issue a similar warning,
but MUST NOT raise an error.

A license expression is a string using the SPDX license expression syntax as
documented in the SPDX specification [#spdx]_ using either Version 2.2
[#spdx22]_ or a later compatible version. SPDX is a working group at the Linux
Foundation that defines a standard way to exchange package information.

When used in the ``License-Expression`` field and as a specialization of the SPDX
license expression definition, a license expression can use the following license
identifiers:

- Any SPDX-listed license short-form identifiers that are published in the SPDX
  License List [#spdxlist]_, version 3.15 or any later compatible version.
  Note that the SPDX working group never removes any license identifiers;
  instead, they may choose to mark an identifier as "deprecated".

- The ``LicenseRef-Public-Domain`` and ``LicenseRef-Proprietary`` strings to
  identify licenses that are not included in the SPDX license list.

When processing the ``License-Expression`` field to determine if it contains
a valid license expression, build and publishing tools:

- SHOULD halt execution and raise an error if:

  - The field does not contain a valid license expression

  - One or more license identifiers are not valid (as defined above)

- SHOULD report an informational warning, and publishing tools MAY raise an
  error if one or more license identifiers have been marked as deprecated in
  the SPDX License List [#spdxlist]_.

- MUST store a case-normalized version of the ``License-Expression`` field
  using the reference case for each SPDX license identifier and
  uppercase for the ``AND``, ``OR`` and ``WITH`` keywords.

- SHOULD report an informational warning, and MAY raise an error if
  the normalization process results in changes to the
  ``License-Expression`` field contents.


Add License-File Field
''''''''''''''''''''''

The ``License-File`` field is specified to contain the string representation of
the path relative to ``.dist-info`` of license-related files,
such as license text, author/attribution information or legal notices.
The license file content MUST be UTF-8 encoded text.

It is an optional, multi-use field which may appear zero or more times,
each instance listing a path to one of the license files to be included in
distributions of the package.

Build tools SHOULD honor this field and include the corresponding license
file(s) in the built package.


Deprecate License Field
'''''''''''''''''''''''

The legacy unstructured-text ``License`` field is deprecated and replaced by
the new ``License-Expression`` field.

Build and publishing tools MUST raise an error if both fields are present and
their values are not identical, including capitalization and excluding
leading and trailing whitespace.

If only the ``License`` field is present, such tools SHOULD issue a warning
informing users it is deprecated and recommending ``License-Expression``
instead.

Along with license classifiers, the ``License`` field may be removed from a
new version of the specification in a future PEP.


Deprecate License Classifiers
'''''''''''''''''''''''''''''

Including license classifiers [#classif]_ (those beginning with ``License ::``)
in the ``Classifier`` field (described in PEP 301) is deprecated and
replaced by the more precise ``License-Expression`` field.

New license classifiers SHALL NOT be added; users needing them should
use the ``License-Expression`` field instead.
Along with the ``License`` field, license classifiers may be removed from a
new version of the specification in a future PEP.

If the ``License-Expression`` field is present, build tools MAY and publishing
tools SHOULD raise an error if one or more license classifiers (as defined
above) is included in a ``Classifier`` field, and not add such classifiers
themselves.

Otherwise, if this field contains a license classifier, build tools MAY
and publishing tools SHOULD issue a warning informing users such classifiers
are deprecated and recommending ``License-Expression`` instead.
For compatibility with existing publishing and installation processes,
the presence of license classifiers SHOULD NOT raise an error unless
``License-Expression`` is also provided.


PEP 621 Source Metadata
-----------------------

As currently specified in the canonical PyPA specification [#pypapep621]_,
PEP 621 defines how to declare a project's source metadata in a ``[project]``
table in the ``pyproject.toml`` file for packaging tools to consume and
output a distribution's core metadata.

This PEP adds the ``expression`` and ``files`` keys to the ``license`` table
and deprecates the ``file`` and ``text`` keys.


Add Expression Key
''''''''''''''''''

A new ``expression`` key is added to the ``license`` table, which has a string
value that is a valid SPDX license expression, as defined above. Its value
maps to the ``License-Expression`` field in the core metadata.
Tools MAY also back-fill the ``license`` core metadata field with the
verbatim value of the ``expression`` key, but to do so, ``license`` MUST be
listed as ``dynamic``.

It is mutually exclusive with both the ``file`` and ``text`` keys; tools
MUST raise an error if both ``expression`` and ``text`` are present, and
SHOULD raise an error if both ``expression`` and ``file`` are specified.
It is not mutually exclusive with the ``files`` key; both can and should
be included.

Packaging tools SHOULD validate the field as described above, outputting an
error or warning as specified, but MUST NOT perform case normalization unless
the field is listed as ``dynamic``, and if it is not, MUST raise an error if
case-normalization would result in a change to the field contents.


Add Files Key
'''''''''''''

A new ``files`` key is added to the ``license`` table, which has as its
value an array of strings that are paths relative to the ``pyproject.toml``
to file(s) containing licenses and other legal notices for the project.
Its values map to the ``License-File`` fields in the core metadata.
Packaging tools SHOULD include all specified files in any distribution
artifacts for the project, and MUST assume all files are encoded as UTF-8.

It is mutually exclusive with both the ``file`` and ``text`` keys; tools
MUST raise an error if both ``files`` and ``file`` are present, and SHOULD
raise an error if both ``files`` and ``text`` are specified.
It is not mutually exclusive with the ``expression`` key; both can and
should be included.


Deprecate File Key
''''''''''''''''''

The (singular) ``file`` key in the ``license`` table is now deprecated.
However, its value now maps to the ``License-File`` field in the core
metadata; packaging tools SHOULD now use it to fill that field,
and SHOULD include the file in any distribution artifacts for the project.

The new ``expression`` and ``files`` keys are mutually exclusive with it;
tools MUST raise an error if both ``file`` and ``files`` are present,
and SHOULD raise an error if both ``file`` and ``expression`` are specified.

If only the ``file`` key is present in the ``license`` table, tools SHOULD
issue a warning informing users it is deprecated and recommending the
``files`` key instead.

The ``file`` key may be removed from a new version of the specification
in a future PEP.


Deprecate Text Key
''''''''''''''''''

The ``text`` key in the ``license`` table is now deprecated.

The new ``expression`` and ``files`` keys are mutually exclusive with it;
tools MUST raise an error if both ``text`` and ``expression`` are present,
and SHOULD raise an error if both ``text`` and ``files`` are specified.

If only the ``text`` key is present in the ``license`` table, tools SHOULD
issue a warning informing users it is deprecated and recommending the
``expression`` key instead.

The ``text`` key may be removed from a new version of the specification
in a future PEP.


Converting Legacy Metadata
--------------------------

If the contents of the ``License`` field are a valid SPDX expression containing
solely known, non-deprecated license identifiers, build and publishing tools MAY
use it to fill the ``License-Expression`` field.

Similarly, if the ``Classifier`` field contains exactly one license classifier
(those beginning with ``License ::``) that unambiguously maps to exactly one
valid, non-deprecated SPDX identifier, tools MAY use it to fill the
``License-Expression`` field.

If both a non-empty ``License`` field and a single license classifier are
present, the contents of the ``License`` field, including capitalization
(but excluding leading and trailing whitespace), MUST exactly match the SPDX
license identifier mapped to the license classifier to be considered
unambiguous for the purposes of automatically filling the
``License-Expression`` field.

If tools have filled the ``License-Expression`` field as described above,
they MUST output a prominent, user-visible warning informing package authors
of that fact, including the ``License-Expression`` string they have output,
and recommending that the source metadata be updated accordingly
with the indicated ``License-Expression``.

In any other case, tools MUST NOT use the contents of the ``License`` field
or license classifiers to fill the ``License-Expression`` field without
informing the user and requiring unambiguous, affirmative user action to
select and confirm the desired ``License-Expression`` value before proceeding.


Mapping License Classifiers to SPDX Identifiers
'''''''''''''''''''''''''''''''''''''''''''''''

The following defines the mapping between legacy license classifiers
and SPDX license identifiers, in cases other than strict 1:1
correspondence from a classifier to a defined identifier.

- Classifier ``License :: Public Domain`` becomes
  ``License-Expression: LicenseRef-Public-Domain``. Tools SHOULD
  encourage the use of more explicit and legally portable license identifiers
  such as ``CC0-1.0`` [#cc0]_ or the ``Unlicense`` [#unlic]_,
  since the meaning associated with the term "public domain" is thoroughly
  dependent on the specific legal jurisdiction involved,
  some of which lack the concept entirely.

- The generic and sometimes ambiguous classifiers
  ``License :: Free For Educational Use``,
  ``License :: Free For Home Use``,
  ``License :: Free for non-commercial use``,
  ``License :: Freely Distributable``,
  ``License :: Free To Use But Restricted``,
  ``License :: Freeware``, and
  ``License :: Other/Proprietary License`` MAY be mapped to the generic
  ``License-Expression: ``LicenseRef-Proprietary`` expression,
  but tools MUST issue a prominent, informative warning if they do so.
  Alternatively, tools MAY choose to treat the above as ambiguous and
  require user confirmation to fill ``License-Expression`` in these cases.

- The generic and ambiguous classifiers ``License :: OSI Approved`` and
  ``License :: DFSG approved`` do not map to any license expression,
  and thus tools MUST treat them as ambiguous and require user intervention
  to fill ``License-Expression``.

- The classifiers ``License :: GUST Font License 1.0*`` and
  ``License :: GUST Font License 2006-09-30`` have no mapping to SPDX license
  identifiers and no PyPI package uses them, as of the writing of this PEP.
  Therefore, tools MUST treat them as ambiguous when attempting to fill
  ``License-Expression``.

The remainder of the classifiers using a ``License ::`` prefix map to a
simple single-identifier license expression using the corresponding
SPDX license identifiers.

When multiple license-related classifiers are used, their relation is ambiguous
and it is typically not possible to determine if all the licenses apply or if
there is a choice that is possible among the licenses. In this case, tools
MUST NOT automatically infer a license expression and SHOULD suggest that the
package author construct a license expression which expresses their intent.


Backwards Compatibility
=======================

Adding a new, dedicated ``License-Expression`` field unambiguously signals
support for the new metadata fields and avoids the risk of new tooling
misinterpreting a license expression as a free-form license description,
or vice versa, and raises an error if and only if the user affirmatively
upgrades to the latest metadata version by adding said field.

The legacy ``License`` field and ``License ::`` classifiers will be deprecated
but not removed, to retain backward compatibility, while gently preparing users
for their future removal. Eventually, they would be removed, but that would be
following a suitable transition period and left to a future PEP and a new
version of the core metadata specification.

Formally specifying the ``License-File`` field is only codifying the existing
practice in ``wheel`` and ``setuptools``, and should be fully
backwards-compatible with their existing use of that field.


Security Implications
=====================

This PEP has no foreseen security implications: the License-Expression field is
a plain string and the License-File(s) are file paths. None of them introduces
any known new security concerns.


How to Teach This
=================

The simple cases are simple: a single license identifier is a valid license
expression and a large majority of packages use a single license.

The plan to teach users of packaging tools how to express their package's
license with a valid license expression is to have tools issue informative
messages when they detect invalid license expressions, or when the deprecated
``License`` field or a ``License ::`` classifier is used.

An immediate, descriptive error message if an invalid ``License-Expression``
is used will help users understand they need to use valid SPDX identifiers in
this field, and catch them if they make a mistake.
For authors still using the now-deprecated, less precise and more redundant
``License`` field or ``License ::`` classifiers, packaging tools will warn
them and inform them of the modern replacement, ``License-Expression``.
Finally, for users who may have forgot or not be aware they need to do so,
publishing tools will gently guide them toward including ``License-Expression``
and ``License-Files`` with their uploaded packages.

Tools may also help with the conversion and suggest a license expression in some
cases:

- The section `Mapping License Classifiers to SPDX Identifiers`_ provides
  tool authors with guidelines on how to suggest a license expression produced
  from legacy classifiers.

- Tools may also be able to infer and suggest how to update an existing
  ``License`` value and convert that to a ``License-Expression``.
  For instance, a tool may suggest converting from a ``License`` field with
  ``Apache2`` (which is not a valid license expression as defined in this PEP)
  to a ``License-Expression`` field with ``Apache-2.0`` (which is a valid license
  expression using an SPDX license identifier).


Reference Implementation
========================

Tools will need to support parsing and validating license expressions in the
``License-Expression`` field.

The ``license-expression`` library [#licexp]_ is a reference Python
implementation of a library that handles license expressions including parsing,
validating and formatting license expressions using flexible lists of license
symbols (including SPDX license identifiers and any extra identifiers referenced
here). It is licensed under the Apache-2.0 license and is used in a few projects
such as the SPDX Python tools [#spdxpy]_, the ScanCode toolkit [#scancodetk]_
and the Free Software Foundation Europe (FSFE) Reuse project [#reuse]_.


Rejected Ideas
==============

Core Metadata Fields
--------------------

Potential alternatives to the structure, content and deprecation of the
core metadata fields specified in this PEP.


Re-Use the License Field
''''''''''''''''''''''''

Following initial discussion [#reusediscussion]_, earlier versions of this
PEP proposed to re-use the existing ``License`` field, which tools would
attempt to parse as a SPDX expression with a fall back to treating as free
text. Initially, this would merely cause a warning (or even pass silently),
but would eventually be treated as an error by modern tooling.

This offered the benefit of greater backwards-compatibility,
easing the community into using SPDX expressions while taking advantage of
packages that already have them (either intentionally or coincidentally),
and avoided adding yet another license-related field.

However, following substantial discussion, consensus was reached that a
dedicated ``License-Expression`` field was the preferred overall approach.
The presence of this field is an unambiguous signal that a package
intends it to be interpreted as a valid SPDX identifier, without the need
for complex and potentially erroneous heuristics, and allows tools to
easily and unambiguously detect invalid content.

This avoids both false positive (``License`` values that a package author
didn't explicitly intend as an explicit SPDX identifier, but that happen
to validate as one), and false negatives (expressions the author intended
to be valid SPDX, but due to a typo or mistake is not), which are otherwise
not clearly distinguishable from true positives and negatives, an ambiguity
at odds with the goals of this PEP.

Furthermore, it allows both the existing ``License`` field and
the ``License::`` classifiers to be more easily deprecated,
with tools able to cleanly distinguish between packages intending to
affirmatively conform to the updated specification in this PEP or not,
and adapt their behavior (warnings, errors, etc) accordingly.
Otherwise, tools would either have to allow duplicative and potentially
conflicting ``License`` fields and classifiers, or warn/error on the
substantial number of existing packages that have SPDX identifiers as the
value for the ``License`` field, intentionally or otherwise (e.g. ``MIT``).

Finally, it avoids changing the behavior of an existing metadata field,
and avoids tools having to guess the ``Metadata-Version`` and field behavior
based on its value rather than merely its presence.

While this would mean the subset of existing projects containing ``License``
fields valid as SPDX expressions wouldn't automatically be recognized as such,
this only requires appending a few characters to the key name in the
package's source metadata, and this PEP provides extensive guidance on
how this can be done automatically by tooling.

Given all this, it was decided to proceed with defining a new,
purpose-created field, ``License-Expression``.


Re-Use the License Field with a Value Prefix
''''''''''''''''''''''''''''''''''''''''''''

As an alternative to the above, it was suggested to reduce the ambiguity
inherent in re-using the ``License`` field by prefixing SPDX expressions
with, e.g. ``spdx:``. However, this effectively amounted to creating a field
within a field, and doesn't address all the downsides of keeping the
``License`` field. Namely, it still changes the behavior of an
existing metadata field, requires tools to parse its value
to determine how to handle its content, and makes the specification and
deprecation process more complex and less clean.

Yet, it still shares a same main potential downside as just creating a new
field, that projects currently using valid SPDX identifiers in the ``License``
field, intentionally or not, won't be automatically recognized, and requires
about the same amount of effort to fix, namely changing a line in the
package's source metadata. Therefore, it was rejected in favor of a new field.


Don't Make License-Expression Mutually Exclusive
''''''''''''''''''''''''''''''''''''''''''''''''

For backwards compatibility, the ``License`` field and/or the license
classifiers could still be allowed together with the new
``License-Expression`` field, presumably with a warning. However, this
could easily lead to inconsistent, and at the very least duplicative
license metadata in no less than *three* different fields, which is
squarely contrary to the goals of this PEP of making the licensing story
simpler and unambiguous. Therefore, and in concert with clear community
consensus otherwise, this idea was soundly rejected.


Don't Deprecate Existing License Field and Classifiers
''''''''''''''''''''''''''''''''''''''''''''''''''''''

Several community members were initially concerned that deprecating the
existing ``License`` field and license classifiers would result in
excessive churn for existing package authors and raise the barrier to
entry for new ones, particularly everyday Python developers seeking to
package and publish their personal projects without necessarily caring
too much about the legal technicalities or being a "license lawyer".
Indeed, every deprecation comes with some non-zero short-term cost,
and should be carefully considered relative to the overall long-term
net benefit. And at the minimum, this change shouldn't make it more
difficult for the average Python developer to share their work under
a license of their choice, and ideally improve the situation.

Following many rounds of proposals, discussion and refinement,
the general consensus was clearly in favor of deprecating the legacy
means of specifying a license, in favor of "one obvious way to do it",
to improve the currently complex and fragmented story around license
documentation. Not doing so would leave three different un-deprecated ways of
specifying a license for a package, two of them ambiguous, less than
clear/obvious how to use, inconsistently documented and out of date.
This is more complex for for all tools in the ecosystem to support
indefinitely (rather than simply installers supporting older packages
implementing previous frozen metadata versions), resulting in a non-trivial
and unbounded maintenance cost.

Furthermore, it leads to a more complex and confusing landscape for users with
three similar but distinct options to choose from, particularly with older
documentation, answers and articles floating around suggesting different ones.
Of the three, ``License-Expression`` is the simplest and clearest to use
correctly; users just paste in their desired license identifier, or select it
via a tool, and they're done; no need to learn about Trove classifiers and
dig through the list to figure out which one(s) apply (and be confused
by many ambiguous options), or figure out on their own what should go
in the ``license`` field (anything from nothing, to the license text,
to a free-form description, to the same SPDX identifier they would be
entering in the ``License-Expression`` field anyway, assuming they can
easily find documentation at all about it). In fact, this can be
made even easier thanks to the new field. For example, GitHub's popular
ChooseALicense.com [#choosealicense]_ links to how to add SPDX license
identifiers to the packaging metadata of various languages that support
them right in the sidebar of every license page; the SPDX support in this
PEP enables adding Python to that list.

For current package maintainers who have specified a ``License`` or license
classifiers, this PEP only recommends warnings and prohibits errors for
all but publishing tools, which are allowed to error if their intended
distribution platform(s) so requires. Once maintainers are ready to
upgrade, for those already using SPDX expressions (accidentally or not)
this only requires appending a few characters to the key name in the
package's source metadata, and for those with license classifiers that
map to a single unambiguous license, or another defined case (public domain,
proprietary), they merely need to drop the classifier and paste in the
corresponding license identifier. This PEP provides extensive guidance and
examples, as will other resources, as well as explicit instructions for
automated tooling to take care of this with no human changes needed.
More complex cases where license metadata is currently specified may
need a bit of human intervention, but in most cases tools will be able
to provide a list of options following the mappings in this PEP, and
these are typically the projects most likely to be concerned about
licensing issues in any case, and thus most benefited by this PEP.

Finally, for unmaintained packages, those using tools supporting older
metadata versions, or those who choose not to provide license metadata,
no changes are required regardless of the deprecation.


Other Ideas
-----------

Miscellaneous proposals, possibilities and discussion points that were
ultimately not adopted.


Map Identifiers to License Files
''''''''''''''''''''''''''''''''

This would require using a mapping (two parallel lists would be too prone to
alignment errors) and a mapping would bring extra complication to how license
are documented by adding an additional nesting level.

A mapping would be needed as you cannot guarantee that all expressions (e.g.
GPL with an exception may be in a single file) or all the license keys have a
single license file and that any expression does not have more than one. (e.g.
an Apache license ``LICENSE`` and its ``NOTICE`` file for instance are two
distinct files). Yet in most cases, there is a simpler "one license", "one or
more license files". In the rarer and more complex cases where there are many
licenses involved you can still use the proposed conventions at the cost of a
slight loss of clarity by not specifying which text file is for which license
identifier, but you are not forcing the more complex data model (e.g. a mapping)
on everyone that may not need it.

We could of course have a data field with multiple possible value types (it's a
string, it's a list, it's a mapping!) but this could be a source of confusion.
This is what has been done for instance in npm (historically) and in Rubygems
(still today) and as result you need to test the type of the metadata field
before using it in code and users are confused about when to use a list or a
string.


Map Identifiers to Source Files
'''''''''''''''''''''''''''''''

File-level notices are not considered as part of the scope of this PEP and the
existing ``SPDX-License-Identifier`` [#spdxids]_ convention can be used and
may not need further specification as a PEP.


Don't Require Compatibility with a Specific SPDX Version
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

This PEP could omit specifying a specific SPDX specification version,
or one for the list of valid license identifiers, which would allow
more flexible updates as the specification evolves without another
PEP or equivalent.

However, serious concerns were expressed about a future SPDX update breaking
compatibility with existing expressions and identifiers, leaving current
packages with invalid metadata per the definition in this PEP. Requiring
compatibility with a specific version of these specifications here
and requiring a PEP or similar process to update it avoids that from
occurring, and follows the practice of other packaging ecosystems.

Therefore, it was decided [#spdxversion]_ to specify a minimum version
and requires tools to be compatible with it, while still allowing updates
so long as they don't break backward compatibility. This enables
tools to immediate take advantage of improvements and accept new
licenses, but also remain backwards compatible with the version
specified here, balancing flexibility and compatibility.


Appendix 1. License Expression Examples
=======================================

Simple Example
--------------

Setuptools itself, as of version 59.1.1 [#setuptools5911]_, does not use the
``License`` field. Further, ``license_file``/``license_files`` is no longer
explicitly specified, as it was previously, since ``setuptools`` relies on
its automatic inclusion of license-related files matching common patterns,
including the ``LICENSE`` file it uses.

It only includes the following license-related metadata in its ``setup.cfg``::

    classifiers =
        License :: OSI Approved :: MIT License

The simplest migration to this PEP would consist of using this instead::

    license_expression = MIT

Or, in a PEP 621 ``pyproject.toml``::

    [project.license]
    expression = "MIT"

The output core metadata for the package would then be::

    License-Expression: MIT
    License-File: LICENSE


Complex Example
---------------

Suppose Setuptools were to include the licenses of the third-party packages
that are vendored in the ``setuptools/_vendor/`` and ``pkg_resources/_vendor``
directories; specifically::

    packaging==21.2
    pyparsing==2.2.1
    ordered-set==3.1.1
    more_itertools==8.8.0

The license expressions for these packages are::

    packaging: Apache-2.0 OR BSD-2-Clause
    pyparsing: MIT
    ordered-set: MIT
    more_itertools: MIT

Therefore, a comprehensive license expression covering both ``setuptools``
proper and its vendored dependencies could contain these metadata, combining
all the license expressions in one expression, our ``setup.cfg`` would be::

    license_expression = MIT AND (Apache-2.0 OR BSD-2-Clause)
    license_files =
        LICENSE.txt
        LICENSE-PACKAGING.txt

Or, in a PEP 621 ``pyproject.toml``, this would look like::

    [project.license]
    expression = "MIT AND (Apache-2.0 OR BSD-2-Clause)"
    files = ["LICENSE.txt", "LICENSE-PACKAGING.txt"]

Here, we assume that the ``LICENSE.txt`` file contains the text of the MIT
license and the copyrights used by ``setuptools``, ``pyparsing``,
``more_itertools`` and ``ordered-set``, and that the ``LICENSE-PACKAGING.txt``
file contains the texts of the Apache and BSD licenses, and the ``packaging``
copyright statements and license choice notice [#packlic]_.

With either approach, the resulting core metadata would be::

    License-Expression: MIT AND (Apache-2.0 OR BSD-2-Clause)
    License-File: LICENSE.txt
    License-File: LICENSE-PACKAGING.txt


Conversion Example
------------------

Suppose we were to return to our simple ``setuptools`` case.
Per the specification, given it only has the following license classifier::

    Classifier: License :: OSI Approved :: MIT License

And no value for the ``License`` field; or, equivalently, a value of::

    License: MIT

Then the suggested value for a ``License-Expression`` field would be::

    License-Expression: MIT

For the more complex case, assuming it was currently expressed as multiple
license classifiers, no automatic conversion could be performed due to the
inherent ambiguity, and the user would be prompted on how to handle the
situation themselves.


Expression Examples
-------------------

Some additional examples of valid ``License-Expression`` values::

    License-Expression: MIT

    License-Expression: BSD-3-Clause

    License-Expression: MIT OR GPL-2.0-or-later OR (FSFUL AND BSD-2-Clause)

    License-Expression: GPL-3.0-only WITH Classpath-Exception-2.0 OR BSD-3-Clause

    License-Expression: LicenseRef-Public-Domain OR CC0-1.0 OR Unlicense

    License-Expression: LicenseRef-Proprietary


Appendix 2. License Documentation in Python
===========================================

There are multiple ways used or recommended to document Python package
licenses today. The most common are listed below.


Core Metadata
-------------

There are two overlapping core metadata fields to document a license: the
license-related ``Classifier`` strings [#classif]_ prefixed with ``License ::``
and the ``License`` field as free text [#licfield]_.

The core metadata documentation ``License`` field documentation is currently::

    License
    =======

    .. versionadded:: 1.0

    Text indicating the license covering the distribution where the license
    is not a selection from the "License" Trove classifiers. See
    :ref:`"Classifier" <metadata-classifier>` below.
    This field may also be used to specify a
    particular version of a license which is named via the ``Classifier``
    field, or to indicate a variation or exception to such a license.

    Examples::

        License: This software may only be obtained by sending the
                author a postcard, and then the user promises not
                to redistribute it.

        License: GPL version 3, excluding DRM provisions

Even though there are two fields, it is at times difficult to convey anything
but simpler licensing. For instance, some classifiers lack precision
(GPL without a version) and when multiple license-related classifiers are
listed, it is not clear if both licenses must apply, or the user may choose
between them. Furthermore, the list of available license-related classifiers
is often out-of-date.


Setuptools and Wheels
---------------------

Beyond a license code or qualifier, license text files are documented and
included in a built package either implicitly or explicitly and this is another
possible source of confusion:

- In ``setuptools`` [#setuptoolssdist]_ and wheels [#wheels]_, license files
  are automatically added to the distribution (at their source location in
  in a source distribution (sdist), and in the ``.dist-info`` directory
  of a built wheel) if they match one of a number of common license file
  name patterns (``LICEN[CS]E*``, ``COPYING*``, ``NOTICE*`` and ``AUTHORS*``).
  Alternatively, a package author can specify a list of license file paths to
  include in the built wheel under the ``license_files`` key in the
  ``[metadata]`` section of the project's ``setup.cfg``, or as an argument
  to the ``setuptools`` ``setup()`` function.

- Both tools also support an older, singular ``license_file`` parameter that
  allows specifying only one license file to add to the distribution, which
  has been deprecated for some time but still sees some use.
  See [#pipsetup]_ for instance.

- Following the publication of an earlier draft of this PEP, ``setuptools``
  added support for ``License-File`` in package metadata as described here.
  This allows other tools consuming the resulting metadata to unambiguously
  locate the license file(s) for a given package.


**Note:** the ``License-File`` field proposed in this PEP already exists in
``wheel`` and ``setuptools`` with the same behaviour as explained above.
This PEP is only recognizing and documenting the existing practice as used
in ``wheel`` and ``setuptools`` to add license files to the distribution,
and formally including their paths in core metadata (which has since been
implemented on the basis of a draft of this PEP).


PyPA Packaging Guide and Sample Project
---------------------------------------

Both the PyPA beginner packaging tutorial [#packagingtuttxt]_ and its more
comprehensive packaging guide [#packagingguidetxt]_ state that it is important
that every package include a license file. They point to the ``LICENSE.txt``
in the official PyPA sample project as an example, which is explicitly listed
under the ``license_files`` key in its ``setup.cfg`` [#samplesetupcfg]_,
following existing practice formally specified by this PEP.

Both the beginner packaging tutorial [#packagingtutkey]_ and the sample project
[#samplesetuppy]_ only use classifiers to declare a package's license, and do
not include or mention the ``license`` field. The full packaging guide does
mention this field, but states that authors should use the license classifiers
instead, unless the project uses a non-standard license (which the guide
discourages) [#licfield]_.


Python Source Code Files
------------------------

**Note:** Documenting licenses in source code is not in the scope of this PEP.

Beside using comments and/or ``SPDX-License-Identifier`` conventions, the license
is sometimes documented in Python code files using "dunder" variables typically
named after one of the lower cased Core Metadata fields such as ``__license__``
[#pycode]_.

This convention (dunder global variables) is recognized by the built-in ``help()``
function and the standard ``pydoc`` module. The dunder variable(s) will show up in
the ``help()`` DATA section for a module.


Other Python Packaging Tools
----------------------------

- Conda package manifests [#conda]_ have support for ``license`` and
  ``license_file`` fields, and automatically include license files
  following similar naming patterns as ``wheel`` and ``setuptools``.

- Flit [#flit]_ recommends using classifiers instead of the ``License`` field
  (per the current PyPA packaging guide).

- PBR [#pbr]_ uses similar data as setuptools, but always stored in
  ``setup.cfg``.

- Poetry [#poetry]_ specifies the use of the ``license`` field in
  ``pyproject.toml`` with SPDX license identifiers.


Appendix 3. License Documentation in Other Projects
===================================================

Here is a survey of how things are done elsewhere.


Linux Distribution Packages
---------------------------

**Note:** in most cases the license texts of the most common licenses are included
globally once in a shared documentation directory (e.g. ``/usr/share/doc``).

- Debian documents package licenses with machine readable copyright files
  [#dep5]_. This specification defines its own license expression syntax that is
  very similar to the SDPX syntax and use its own list of license identifiers
  for common licenses (also closely related to SPDX identifiers).

- Fedora packages [#fedora]_ specify how to include ``License Texts``
  [#fedoratext]_ and how use a ``License`` field [#fedoralic]_ that must be filled
  with an appropriate license Short License identifier(s) from an extensive list
  of "Good Licenses" identifiers [#fedoralist]_. Fedora also defines its own
  license expression syntax very similar to the SDPX syntax.

- openSUSE packages [#opensuse]_ use SPDX license expressions with
  SPDX license identifiers and a list of extra license identifiers
  [#opensuselist]_.

- Gentoo ebuild uses a ``LICENSE`` variable [#gentoo]_. This field is specified
  in GLEP-0023 [#glep23]_ and in the Gentoo development manual [#gentoodev]_.
  Gentoo also defines a license expression syntax and a list of allowed
  licenses. The expression syntax is rather different from SPDX.

- FreeBSD package Makefile [#freebsd]_ provides ``LICENSE`` and
  ``LICENSE_FILE`` fields with a list of custom license symbols. For
  non-standard licenses, FreeBSD recommend to use ``LICENSE=UNKNOWN`` and add
  ``LICENSE_NAME`` and ``LICENSE_TEXT`` fields, as well as sophisticated
  ``LICENSE_PERMS`` to qualify the license permissions and ``LICENSE_GROUPS``
  to document a license grouping. The ``LICENSE_COMB`` allows to document more
  than one license and how they apply together, forming a custom license
  expression syntax. FreeBSD also recommends the use of
  ``SPDX-License-Identifier`` in source code files.

- Arch Linux PKGBUILD [#archinux]_ define its own license identifiers
  [#archlinuxlist]_. The value ``'unknown'`` can be used if the license is not
  defined.

- OpenWRT ipk packages [#openwrt]_ use the ``PKG_LICENSE`` and
  ``PKG_LICENSE_FILES`` variables and recommend the use of SPDX License
  identifiers.

- NixOS uses SPDX identifiers [#nixos]_ and some extra license identifiers in
  its license field.

- GNU Guix (based on NixOS) has a single License field, uses its own license
  symbols list [#guix]_ and specifies to use one license or a list of licenses
  [#guixlic]_.

- Alpine Linux packages [#alpine]_ recommend using SPDX identifiers in the
  license field.


Language and Application Packages
---------------------------------

- In Java, Maven POM [#maven]_ defines a ``licenses`` XML tag with a list of license
  items each with a name, URL, comments and "distribution" type. This is not
  mandatory and the content of each field is not specified.

- JavaScript npm package.json [#npm]_ use a single license field with SPDX
  license expression or the ``UNLICENSED`` id if no license is specified.
  A license file can be referenced as an alternative using "SEE LICENSE IN
  <filename>" in the single ``license`` field.

- Rubygems gemspec [#gem]_ specifies either a singular license string or a list
  of license strings. The relationship between multiple licenses in a list is
  not specified. They recommend using SPDX license identifiers.

- CPAN Perl modules [#perl]_ use a single license field which is either a single
  string or a list of strings. The relationship between the licenses in a list
  is not specified. There is a list of custom license identifiers plus
  these generic identifiers: ``open_source``, ``restricted``, ``unrestricted``,
  ``unknown``.

- Rust Cargo [#cargo]_ specifies the use of an SPDX license expression (v2.1) in
  the ``license`` field. It also supports an alternative expression syntax using
  slash-separated SPDX license identifiers. There is also a ``license_file``
  field. The crates.io package registry [#cratesio]_ requires that either
  ``license`` or ``license_file`` fields are set when you upload a package.

- PHP Composer composer.json [#composer]_ uses a ``license`` field with an SPDX
  license id or "proprietary". The ``license`` field is either a single string
  that can use something which resembles the SPDX license expression syntax with
  "and" and "or" keywords; or is a list of strings if there is a choice of
  licenses (aka. a "disjunctive" choice of license).

- NuGet packages [#nuget]_ were using only a simple license URL and are now
  specifying to use an SPDX License expression and/or the path to a license
  file within the package. The NuGet.org repository states that they only
  accepts license expressions that are `approved by the Open Source Initiative
  or the Free Software Foundation.`

- Go language modules ``go.mod`` have no provision for any metadata beyond
  dependencies. Licensing information is left for code authors and other
  community package managers to document.

- Dart/Flutter spec [#flutter]_ recommends to use a single ``LICENSE`` file
  that should contain all the license texts each separated by a line with 80
  hyphens.

- JavaScript Bower [#bower]_ ``license`` field is either a single string or a list
  of strings using either SPDX license identifiers, or a path or a URL to a
  license file.

- Cocoapods podspec [#cocoapod]_ ``license`` field is either a single string or a
  mapping with attributes of type, file and text keys. This is mandatory unless
  there is a LICENSE or LICENCE file provided.

- Haskell Cabal [#cabal]_ accepts an SPDX license expression since version 2.2.
  The version of the SPDX license list used is a function of the ``cabal`` version.
  The specification also provides a mapping between pre-SPDX Legacy license
  Identifiers and SPDX identifiers. Cabal also specifies a ``license-file(s)``
  field that lists license files that will be installed with the package.

- Erlang/Elixir mix/hex package [#mix]_ specifies a ``licenses`` field as a
  required list of license strings and recommends to use SPDX license
  identifiers.

- D lang dub package [#dub]_ defines its own list of license identifiers and
  its own license expression syntax and both are similar to the SPDX conventions.

- R Package DESCRIPTION [#cran]_ defines its own sophisticated license
  expression syntax and list of licenses identifiers. R has a unique way to
  support specifiers for license versions such as ``LGPL (>= 2.0, < 3)`` in its
  license expression syntax.


Other Ecosystems
----------------

- ``SPDX-License-Identifier`` [#spdxids]_ is a simple convention to document the
  license inside a file.

- The Free Software Foundation (FSF) promotes the use of SPDX license identifiers
  for clarity in the GPL and other versioned free software licenses [#gnu]_
  [#fsf]_.

- The Free Software Foundation Europe (FSFE) REUSE project [#reuse]_ promotes
  using ``SPDX-License-Identifier``.

- The Linux kernel uses ``SPDX-License-Identifier`` and parts of the FSFE REUSE
  conventions to document its licenses [#linux]_.

- U-Boot spearheaded using ``SPDX-License-Identifier`` in code and now follows the
  Linux ways [#uboot]_.

- The Apache Software Foundation projects use RDF DOAP [#apache]_ with a single
  license field pointing to SPDX license identifiers.

- The Eclipse Foundation promotes using ``SPDX-license-Identifiers`` [#eclipse]_

- The ClearlyDefined project [#cd]_ promotes using SPDX license identifiers and
  expressions to improve license clarity.

- The Android Open Source Project [#android]_ use ``MODULE_LICENSE_XXX`` empty
  tag files where ``XXX`` is a license code such as BSD, APACHE, GPL, etc. And
  side by side with this ``MODULE_LICENSE`` file there is a ``NOTICE`` file
  that contains license and notices texts.


References
==========

.. [#cms] https://packaging.python.org/specifications/core-metadata
.. [#cdstats] https://clearlydefined.io/stats
.. [#cd] https://clearlydefined.io
.. [#osi] https://opensource.org
.. [#classif] https://pypi.org/classifiers
.. [#pypapep621] https://packaging.python.org/specifications/declaring-project-metadata/
.. [#spdxlist] https://spdx.org/licenses/
.. [#spdx] https://spdx.dev/
.. [#spdx22] https://spdx.github.io/spdx-spec/SPDX-license-expressions/
.. [#wheels] https://github.com/pypa/wheel/blob/0.37.0/docs/user_guide.rst#including-license-files-in-the-generated-wheel-file
.. [#reuse] https://reuse.software/
.. [#licexp] https://github.com/nexB/license-expression/
.. [#spdxpy] https://github.com/spdx/tools-python/
.. [#reusediscussion] https://github.com/pombredanne/spdx-pypi-pep/issues/7
.. [#choosealicense] https://choosealicense.com/
.. [#spdxversion] https://github.com/pombredanne/spdx-pypi-pep/issues/6
.. [#scancodetk] https://github.com/nexB/scancode-toolkit
.. [#licfield] https://packaging.python.org/guides/distributing-packages-using-setuptools/#license
.. [#samplesetuppy] https://github.com/pypa/sampleproject/blob/3a836905fbd687af334db16b16c37cf51dcbc99c/setup.py#L98
.. [#samplesetupcfg] https://github.com/pypa/sampleproject/blob/3a836905fbd687af334db16b16c37cf51dcbc99c/setup.cfg
.. [#pipsetup] https://github.com/pypa/pip/blob/21.3.1/setup.cfg#L114
.. [#setuptoolssdist] https://github.com/pypa/setuptools/pull/1767
.. [#packagingtuttxt] https://packaging.python.org/tutorials/packaging-projects/#creating-a-license
.. [#packagingguidetxt] https://packaging.python.org/guides/distributing-packages-using-setuptools/#license-txt
.. [#packagingtutkey] https://packaging.python.org/tutorials/packaging-projects/#configuring-metadata
.. [#pycode] https://github.com/search?l=Python&q=%22__license__%22&type=Code
.. [#setuptools5911] https://github.com/pypa/setuptools/blob/v59.1.1/setup.cfg
.. [#packlic] https://github.com/pypa/packaging/blob/21.2/LICENSE
.. [#conda] https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html#about-section
.. [#flit] https://flit.readthedocs.io/en/stable/pyproject_toml.html
.. [#poetry] https://python-poetry.org/docs/pyproject/#license
.. [#pbr] https://docs.openstack.org/pbr/latest/user/features.html
.. [#dep5] https://dep-team.pages.debian.net/deps/dep5/
.. [#fedora] https://docs.fedoraproject.org/en-US/packaging-guidelines/LicensingGuidelines/
.. [#fedoratext] https://docs.fedoraproject.org/en-US/packaging-guidelines/LicensingGuidelines/#_license_text
.. [#fedoralic] https://docs.fedoraproject.org/en-US/packaging-guidelines/LicensingGuidelines/#_valid_license_short_names
.. [#fedoralist] https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses
.. [#opensuse] https://en.opensuse.org/openSUSE:Packaging_guidelines#Licensing
.. [#opensuselist] https://docs.google.com/spreadsheets/d/14AdaJ6cmU0kvQ4ulq9pWpjdZL5tkR03exRSYJmPGdfs/pub
.. [#gentoo] https://devmanual.gentoo.org/ebuild-writing/variables/index.html#license
.. [#glep23] https://www.gentoo.org/glep/glep-0023.html
.. [#gentoodev] https://devmanual.gentoo.org/general-concepts/licenses/index.html
.. [#freebsd] https://docs.freebsd.org/en/books/porters-handbook/makefiles/#licenses
.. [#archinux] https://wiki.archlinux.org/title/PKGBUILD#license
.. [#archlinuxlist] https://archlinux.org/packages/core/any/licenses/files/
.. [#openwrt] https://openwrt.org/docs/guide-developer/packages#buildpackage_variables
.. [#nixos] https://github.com/NixOS/nixpkgs/blob/21.05/lib/licenses.nix
.. [#guix] https://git.savannah.gnu.org/cgit/guix.git/tree/guix/licenses.scm?h=v1.3.0
.. [#guixlic] https://guix.gnu.org/manual/en/html_node/package-Reference.html#index-license_002c-of-packages
.. [#alpine] https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#license
.. [#maven] https://maven.apache.org/pom.html#Licenses
.. [#npm] https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license
.. [#gem] https://guides.rubygems.org/specification-reference/#license=
.. [#perl] https://metacpan.org/pod/CPAN::Meta::Spec#license
.. [#cargo] https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata
.. [#cratesio] https://doc.rust-lang.org/cargo/reference/registries.html#publish
.. [#composer] https://getcomposer.org/doc/04-schema.md#license
.. [#nuget] https://docs.microsoft.com/en-us/nuget/reference/nuspec#licenseurl
.. [#flutter] https://flutter.dev/docs/development/packages-and-plugins/developing-packages#adding-licenses-to-the-license-file
.. [#bower] https://github.com/bower/spec/blob/b00c4403e22e3f6177c410ed3391b9259687e461/json.md#license
.. [#cocoapod] https://guides.cocoapods.org/syntax/podspec.html#license
.. [#cabal] https://cabal.readthedocs.io/en/3.6/cabal-package.html?highlight=license#pkg-field-license
.. [#mix] https://hex.pm/docs/publish
.. [#dub] https://dub.pm/package-format-json.html#licenses
.. [#cran] https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Licensing
.. [#spdxids] https://spdx.dev/resources/use/#identifiers
.. [#gnu] https://www.gnu.org/licenses/identify-licenses-clearly.html
.. [#fsf] https://www.fsf.org/blogs/rms/rms-article-for-claritys-sake-please-dont-say-licensed-under-gnu-gpl-2
.. [#linux] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/license-rules.rst
.. [#uboot] https://www.denx.de/wiki/U-Boot/Licensing
.. [#apache] https://svn.apache.org/repos/asf/allura/doap_Allura.rdf
.. [#eclipse] https://www.eclipse.org/legal/epl-2.0/faq.php
.. [#android] https://github.com/aosp-mirror/platform_external_tcpdump/blob/android-platform-12.0.0_r1/MODULE_LICENSE_BSD
.. [#cc0] https://creativecommons.org/publicdomain/zero/1.0/
.. [#unlic] https://unlicense.org/


Copyright
=========

This document is placed in the public domain or under the CC0-1.0-Universal
license [#cc0]_, whichever is more permissive.


Acknowledgments
===============

- Nick Coghlan
- Kevin P. Fleming
- Pradyun Gedam
- Oleg Grenrus
- Dustin Ingram
- Chris Jerdonek
- Cyril Roelandt
- Luis Villa



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 80
   End:
